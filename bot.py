import os
import logging
from aiogram import Bot, Dispatcher, executor, types
# from config import API_TOKEN


# Configure logging
logging.basicConfig(level=logging.INFO, filename='logfile.log')

API_TOKEN = os.getenv('TOKEN')

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
# –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –±–æ—Ç

dict_name = {'–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥':'d', '–µ':'e', '—ë':'e', '–∂':'zh',\
     '–∑':'z', '–∏':'i', '–π':'i', '–∫':'k', '–ª':'l', '–º':'m', '–Ω':'n', '–æ':'o', '–ø':'p', '—Ä':'r', '—Å':'s', '—Ç':'t', '—É':'u', '—Ñ':'f', '—Ö':'kh', '—Ü':'ts', '—á':'ch', '—à':'sh', '—â':'shch', '—ä':'ie', '—ã':'y', '—å':'',\
     '—ç':'e', '—é':'iu', '—è':'ia'}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_name = message.from_user.first_name
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üåù\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–µ–¥—ë—Ç —Ç–≤–æ—ë –§–ò–û –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É.".format(message)
    text_2 = "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û:\n–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
    user_id = message.from_user.id
    logging.info(f"{user_name=} {user_id=} send message: {message.text}")
    await message.answer(text)
    await message.answer(text_2)

@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    user_name = message.from_user.first_name
    text = "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤\n\nPS: —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é!"
    user_id = message.from_user.id
    logging.info(f"{user_name=} {user_id=} send message: {message.text}")
    await message.answer(text)

@dp.message_handler()
async def get_lastname(message: types.Message):
    name = message.text
    logging.info(f"send message: {name}")
    split_name = name.split()
    if len(split_name) == 3:
        new_name = [j for i in name.lower().split() for j in i if j not in dict_name.keys()]
        if len(new_name) == 0:
            output_name = transate_name(name)
            await message.answer('–û—Ç–ª–∏—á–Ω–æ‚ù§Ô∏è')
            logging.info(f"get {name} -> send {output_name}")
            await message.answer(output_name)
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω–æ! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–∫–≤—ã –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ.')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑.')
    # else:
    #     bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ —Ñ–∏–æ')
# aiogram - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
# –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
# async - —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π

def transate_name(message: str):
    name = message
    t_name = []
    split_name = name.lower().split()
    for i in split_name:
        for j in i:
            t_name.append(dict_name[j])
        t_name.append(' ')
    t_name.pop()
    return ''.join(t_name).title()




# @dp.message_handler()
# async def echo(message: types.Message):
#     user_name = message.from_user.first_name
#     text = message.text
#     user_id = message.from_user.id
#     logging.info(f"{user_name=} {user_id=} send message: {text}")
#     await message.answer(text)
# –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å await

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)